"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[463],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[d]="string"==typeof e?e:r,o[1]=p;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9929:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:25},o="Inputs & Outputs",p={unversionedId:"inputs-outputs",id:"inputs-outputs",title:"Inputs & Outputs",description:"Inputs and outputs can be defined for environments and blueprints to enable inputs",source:"@site/docs/inputs-outputs.md",sourceDirName:".",slug:"/inputs-outputs",permalink:"/docs/inputs-outputs",draft:!1,editUrl:"https://github.com/thecloudsphere/documentation/tree/main/docs/inputs-outputs.md",tags:[],version:"current",sidebarPosition:25,frontMatter:{sidebar_position:25},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/docs/getting-started"},next:{title:"Environments",permalink:"/docs/environments"}},s={},l=[{value:"Inputs",id:"inputs",level:2},{value:"Types",id:"types",level:3},{value:"Outputs",id:"outputs",level:2},{value:"Types",id:"types-1",level:3}],u={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"inputs--outputs"},"Inputs & Outputs"),(0,r.kt)("p",null,"Inputs and outputs can be defined for environments and blueprints to enable inputs\nand outputs."),(0,r.kt)("h2",{id:"inputs"},"Inputs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"  - name: clouds.yaml\n    destination:\n      path: clouds.yaml\n      type: file\n    required: true\n    description: |\n      clouds.yaml is a configuration file that contains everything needed to connect\n      to one or more clouds. It may contain private information and is generally\n      considered private to a user.\n    visibility: private\n\n  - name: cloud name\n    destination:\n      path: ANSIBLE_VAR_provider_cloud\n      type: environment\n    default: openstack\n    required: false\n    description: |\n      Entry from the clouds.yaml to be used.\n")),(0,r.kt)("h3",{id:"types"},"Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"environment"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Input is provided via an environment variable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"file"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Write an input to a file on the ",(0,r.kt)("inlineCode",{parentName:"td"},"/input")," volume")))),(0,r.kt)("h2",{id:"outputs"},"Outputs"),(0,r.kt)("p",null,"An output makes contents of files in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/output")," volume accessible after execution\nof a deployment. In order for defined outputs to be usable, the corresponding file must\nbe created by the deployment beforehand."),(0,r.kt)("p",null,"Here is an example of an Ansible based deployment that writes a public IP address to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"/output")," volume in the file ",(0,r.kt)("inlineCode",{parentName:"p"},"address"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: Write floating ip address to /output/address\n  ansible.builtin.copy:\n    dest: /output/address\n    content: \"{{ result.openstack_servers[0].public_v4 }}\"\n  when: state == 'present'\n")),(0,r.kt)("p",null,"The content of the ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," file can now be read out and made available via an output.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," argument is always relative to ",(0,r.kt)("inlineCode",{parentName:"p"},"/output"),"."),(0,r.kt)("p",null,"It is possible to define the visibility of the output (",(0,r.kt)("inlineCode",{parentName:"p"},"public")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"private"),") via the\noptional ",(0,r.kt)("inlineCode",{parentName:"p"},"visibility")," argument."),(0,r.kt)("p",null,"The expected content can be specified for the source via the optional ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," argument.\nBefore the output is made available, it is checked whether it is an IPv4 address, for example.\nAll currently usable types are listed under ",(0,r.kt)("a",{parentName:"p",href:"#types"},"Types"),"."),(0,r.kt)("p",null,"The output can be described via ",(0,r.kt)("inlineCode",{parentName:"p"},"description"),". This argument is not optional. A description\nmust be given for each output. Markdown can be used to format the descriptions in the UI."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"outputs:\n  - name: address\n    source:\n      path: address\n      type: ipv4address\n    description: |\n      IP address to access the instance\n    visibility: public\n")),(0,r.kt)("h3",{id:"types-1"},"Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"ipv4address"),(0,r.kt)("td",{parentName:"tr",align:"left"},"IPv4 address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"ssh"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Private SSH key")))))}d.isMDXComponent=!0}}]);