"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[857],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(r),d=o,f=m["".concat(i,".").concat(d)]||m[d]||u[d]||l;return r?n.createElement(f,a(a({ref:t},p),{},{components:r})):n.createElement(f,a({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<l;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},757:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const l={sidebar_position:60},a="Samples",s={unversionedId:"samples",id:"samples",title:"Samples",description:"Ansible",source:"@site/docs/samples.md",sourceDirName:".",slug:"/samples",permalink:"/docs/samples",draft:!1,editUrl:"https://github.com/thecloudsphere/documentation/tree/main/docs/samples.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{sidebar_position:60},sidebar:"tutorialSidebar",previous:{title:"Flows",permalink:"/docs/flows"},next:{title:"Release notes",permalink:"/docs/release-notes"}},i={},c=[{value:"Ansible",id:"ansible",level:2},{value:"Terraform",id:"terraform",level:2}],p={toc:c};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"samples"},"Samples"),(0,o.kt)("h2",{id:"ansible"},"Ansible"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nansible-hello-world:\n  environment: ansible/base\n  blueprint: ansible/openstack/hello-world\n  blueprint_version: main\n  inputs:\n    clouds.yaml:\n      type: file\n      path: clouds.yaml\n    "cloud name": openstack\n    flavor: "SCS-1V:1:10"\n    prefix: "{{ tcs.name }}"\n    "public network": public\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"tcsctl environment import ansible/base\ntcsctl blueprint import ansible/openstack/hello-world\ntcsctl template import hello-world.yaml ansible-hello-world\ntcsctl deployment create ansible ansible-hello-world\n")),(0,o.kt)("h2",{id:"terraform"},"Terraform"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'terraform-hello-world:\n  environment:\n    name: terraform/openstack\n    repository: thecloudsphere/registry\n    repository_server: https://github.com\n  blueprint:\n    name: terraform/openstack/hello-world\n    repository: thecloudsphere/registry\n    repository_server: https://github.com\n  blueprint_version: main\n  inputs:\n    clouds.yaml:\n      type: file\n      path: clouds.yaml\n    "cloud name": openstack\n    flavor: "SCS-1V:1:10"\n    prefix: "{{ tcs.name }}"\n    "public network": public\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"tcsctl template import hello-world.yaml terraform-hello-world\ntcsctl deployment create terraform terraform-hello-world\n")))}m.isMDXComponent=!0}}]);