"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[296],{8583:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var s=t(4848),i=t(8453);const r={sidebar_position:100},o="Release notes",l={id:"release-notes",title:"Release notes",description:"The release notes were launched on 11.10.2022. At this point, the",source:"@site/docs/release-notes.md",sourceDirName:".",slug:"/release-notes",permalink:"/docs/release-notes",draft:!1,unlisted:!1,editUrl:"https://github.com/thecloudsphere/documentation/tree/main/docs/release-notes.md",tags:[],version:"current",sidebarPosition:100,frontMatter:{sidebar_position:100},sidebar:"tutorialSidebar",previous:{title:"On-premise",permalink:"/docs/on-premise"},next:{title:"Roadmap",permalink:"/docs/roadmap"}},d={},c=[{value:"1.0.0 (Nighthawk)",id:"100-nighthawk",level:2},{value:"Other",id:"other",level:3},{value:"Blueprint: environment overrides",id:"blueprint-environment-overrides",level:3},{value:"Blueprint/Environment/Template: use of template strings",id:"blueprintenvironmenttemplate-use-of-template-strings",level:3},{value:"API: deployment states endpoint",id:"api-deployment-states-endpoint",level:3},{value:"Template: overwrite the environment",id:"template-overwrite-the-environment",level:3},{value:"New CLI feature: Specify the column(s) to include",id:"new-cli-feature-specify-the-columns-to-include",level:3},{value:"New CLI feature: Write outpus to file instead of stdout",id:"new-cli-feature-write-outpus-to-file-instead-of-stdout",level:3},{value:"New CLI feature: Control of deployments",id:"new-cli-feature-control-of-deployments",level:3},{value:"Blueprint: Control of deployments",id:"blueprint-control-of-deployments",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"release-notes",children:"Release notes"}),"\n",(0,s.jsxs)(n.p,{children:["The release notes were launched on 11.10.2022. At this point, the\nminimum functionality of ",(0,s.jsx)(n.strong,{children:"The Cloudsphere"})," was achieved. The MVP was\nusable both via API itself and via the CLI (",(0,s.jsx)(n.code,{children:"tcsctl"}),"). A UI was not\nyet available at that time."]}),"\n",(0,s.jsx)(n.h2,{id:"100-nighthawk",children:"1.0.0 (Nighthawk)"}),"\n",(0,s.jsx)(n.p,{children:"Version 1.0.0 is currently in progress and not yet published."}),"\n",(0,s.jsx)(n.p,{children:"Version 1.0.0 contains the status of the MVP as well as all enhancements\nalready identified and implemented during the evaluation phase of the\nMVP."}),"\n",(0,s.jsx)(n.h3,{id:"other",children:"Other"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Python 3.11 is now used as standard in the service container image"}),"\n",(0,s.jsxs)(n.li,{children:["This project was initially developed under the internal development\nname Timon. In preparation for the first release, it was renamed\n",(0,s.jsx)(n.strong,{children:"The Cloudsphere"})," (TCS for short)."]}),"\n",(0,s.jsxs)(n.li,{children:["The documentation has been switched from Sphinx to Docusaurus and\nis now published on ",(0,s.jsx)(n.a,{href:"https://thecloudsphere.io",children:"thecloudsphere.io"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The Getting Started Guide from the README of\n",(0,s.jsx)(n.a,{href:"https://github.com/thecloudsphere/tcsctl",children:"thecloudsphere/tcsctl"}),"\nhas been integrated into the documentation."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"blueprint-environment-overrides",children:"Blueprint: environment overrides"}),"\n",(0,s.jsx)(n.p,{children:"With environment overrides it is possible to customise certain\npredefined properties in a blueprint when executing an environment on a\nblueprint."}),"\n",(0,s.jsx)(n.p,{children:"The following properties can be adjusted (if supported by the\nenvironment used)."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"blueprint_source"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"blueprint_source_key"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"blueprint_version"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"working_directory"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"outputs_directory"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"makefile"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"makefile_pre_processing"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"makefile_processing"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"makefile_post_processing"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The following sample snippet is from the ",(0,s.jsx)(n.code,{children:"osism/testbed"})," blueprint."]}),"\n",(0,s.jsxs)(n.p,{children:["There, the blueprint is not imported from the registry but from the\nexternal repository ",(0,s.jsx)(n.a,{href:"https://github.com/osism/testbed.git",children:"osism/testbed"}),". The\ndirectory for the execution of Terraform in this case is\n",(0,s.jsx)(n.code,{children:"/processing/terraform"})," (instead of ",(0,s.jsx)(n.code,{children:"/processing"}),"). The outputs are not\nin ",(0,s.jsx)(n.code,{children:"/outputs"})," but in ",(0,s.jsx)(n.code,{children:"/processing/terraform"}),". For the execution of\nTerraform, ",(0,s.jsx)(n.code,{children:"/processing/terraform/Makefile"})," is used instead of\n",(0,s.jsx)(n.code,{children:"/processing/Makefile"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"environment:\n  repository: thecloudsphere/registry\n  name: terraform/openstack\n  version: 1.3.2\n  overrides:\n    blueprint_source: https://github.com/osism/testbed.git\n    # blueprint_source_key:\n    # blueprint_version:\n    working_directory: /processing/terraform\n    outputs_directory: /processing/terraform\n    # makefile:\n    # makefile_pre_processing:\n    makefile_processing: /processing/terraform/Makefile\n    # makefile_post_processing:\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The overrides supported by an environment can be defined via the\nparameter ",(0,s.jsx)(n.code,{children:"supported_overrides"})," at the environment. If\n",(0,s.jsx)(n.code,{children:"supported_overrides"})," is not set, no overrides are supported. All\nsupported overrides must be explicitly listed. If overrides are set that\nare not supported by an environment, a ",(0,s.jsx)(n.code,{children:"WARNING"})," is issued and the\noverride is ignored."]}),"\n",(0,s.jsx)(n.h3,{id:"blueprintenvironmenttemplate-use-of-template-strings",children:"Blueprint/Environment/Template: use of template strings"}),"\n",(0,s.jsx)(n.p,{children:"When executing a deployment, certain variables are set that always can\nbe used."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tcs.id"}),": the UUID of a deployment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tcs.name"}),": the name of a deployment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tcs.created_at"}),": the timestamp when a deployment was initially\nrequested"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["These variables can now be accessed within the ",(0,s.jsx)(n.code,{children:"inputs"})," and ",(0,s.jsx)(n.code,{children:"outputs"})," by\nusing ",(0,s.jsx)(n.a,{href:"https://jinja.palletsprojects.com/en/3.1.x/",children:"Jinja2"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'inputs:\n  prefix: "{{ tcs.id }}"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Additional variables are available in the output. In addition to the\nstandard ",(0,s.jsx)(n.code,{children:"tcs.*"})," templates, inputs can also be accessed there.\nHowever, it is only possible to access inputs of the type ",(0,s.jsx)(n.code,{children:"environment"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, if the following input is defined for a blueprint, it can\nbe accessed in the ",(0,s.jsx)(n.code,{children:"outputs"})," via ",(0,s.jsx)(n.code,{children:"inputs.environment"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'inputs:\n  - name: environment\n    destination:\n      path: ENVIRONMENT\n      type: environment\n    default: betacloud\n    required: false\n    description: |\n      Environment to use.\n\noutputs:\n  - name: private_key\n    source:\n      path: ".id_rsa.{{ inputs.environment }}"\n      type: ssh\n    description: |\n      Private SSH key to access the manager instance\n    visibility: private\n'})}),"\n",(0,s.jsx)(n.h3,{id:"api-deployment-states-endpoint",children:"API: deployment states endpoint"}),"\n",(0,s.jsx)(n.p,{children:"The deployment states endpoint can be used to list all existing states\nin a deployment or to download a specific state."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"/deployments/{project_id}/{deployment_id}/states"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"/deployments/{project_id}/{deployment_id}/states/{version_id}"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The command in the CLI is ",(0,s.jsx)(n.code,{children:"tcsctl deployment states"}),". For the listing of\nall states, only the name or the ID of the deployment is given."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"tcsctl deployment states hello-world\n+--------------------------------------+----------------------------------+\n| version_id                           | last_modified                    |\n|--------------------------------------+----------------------------------|\n| adad1499-8aca-4b54-ba30-86fb7dfc9412 | 2022-10-16T16:08:26.746000+00:00 |\n| 24962ce5-92dc-4a87-a27e-487859f840e4 | 2022-10-16T15:45:04.028000+00:00 |\n| 4c9ef664-f89b-460d-97eb-be0c951e838d | 2022-10-16T15:31:24.197000+00:00 |\n| aafcf490-d782-4c7d-80b1-38a9ce063147 | 2022-10-16T15:28:30.014000+00:00 |\n+--------------------------------------+----------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"To download a specific state, the ID of the state is also specified."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"tcsctl deployment states hello-world adad1499-8aca-4b54-ba30-86fb7dfc9412\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The status is then stored on the local file system in the working\ndirectory in a file with the name\n",(0,s.jsx)(n.code,{children:"adad1499-8aca-4b54-ba30-86fb7dfc9412.tar"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"template-overwrite-the-environment",children:"Template: overwrite the environment"}),"\n",(0,s.jsxs)(n.p,{children:["With the parameters ",(0,s.jsx)(n.code,{children:"environment"})," and ",(0,s.jsx)(n.code,{children:"environment_version"}),", it is\npossible to overwrite the environment set via the selected blueprint and\nits version during a template."]}),"\n",(0,s.jsxs)(n.p,{children:["In blueprint ",(0,s.jsx)(n.code,{children:"terraform/openstack/hello-world"}),", the ",(0,s.jsx)(n.code,{children:"terraform/opentack"}),"\nenvironment is actually used. In this case, the ",(0,s.jsx)(n.code,{children:"python/base"}),"\nenvironment version ",(0,s.jsx)(n.code,{children:"3.10"})," is used instead."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'python-sample:\n  blueprint: terraform/openstack/hello-world\n  blueprint_version: main\n  environment: python/base\n  environment_version: "3.10"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"new-cli-feature-specify-the-columns-to-include",children:"New CLI feature: Specify the column(s) to include"}),"\n",(0,s.jsxs)(n.p,{children:["With the ",(0,s.jsx)(n.code,{children:"list"})," command, the columns can now be filtered using the\n",(0,s.jsx)(n.code,{children:"--column"})," parameter. The parameter can be repeated to show multiple\ncolumns"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"tcsctl deployment list --column name --column status\n+----+-------------+----------+\n|    | name        | status   |\n|----+-------------+----------|\n|  0 | hello-world | CREATED  |\n+----+-------------+----------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"new-cli-feature-write-outpus-to-file-instead-of-stdout",children:"New CLI feature: Write outpus to file instead of stdout"}),"\n",(0,s.jsxs)(n.p,{children:["With the parameter ",(0,s.jsx)(n.code,{children:"--file"}),", the output of a deployment can be written\ndirectly to a file."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"tcsctl deployment outputs hello-world private_key --file id_rsa.hello-world\nOutput private_key from deployment hello-world was written to file id_rsa.hello-world.\n"})}),"\n",(0,s.jsx)(n.h3,{id:"new-cli-feature-control-of-deployments",children:"New CLI feature: Control of deployments"}),"\n",(0,s.jsxs)(n.p,{children:["There are blueprints that support a console, for example SSH, for\ncontrol. This console can be called up with the command\n",(0,s.jsx)(n.code,{children:"tcsctl deployment control"}),". A deployment must be in status ",(0,s.jsx)(n.code,{children:"CREATED"})," or\n",(0,s.jsx)(n.code,{children:"RECONCILED"})," for the control feature to be usable."]}),"\n",(0,s.jsxs)(n.p,{children:["Currently, only SSH is supported. In the future, other tools such as\n",(0,s.jsx)(n.code,{children:"kubectl"})," will be added."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"tcsctl deployment control hello-world\nWelcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-52-generic x86_64)\n[...]\nubuntu@hello-world-instance:~$\n"})}),"\n",(0,s.jsx)(n.h3,{id:"blueprint-control-of-deployments",children:"Blueprint: Control of deployments"}),"\n",(0,s.jsxs)(n.p,{children:["The control object can be used to define the necessary values for the\n",(0,s.jsx)(n.code,{children:"tcsctl deployment control"})," command in a blueprint. The use of outputs\nof the created deployments is possible via templates."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'control:\n  type: ssh\n  arguments:\n    - name: destination\n      value: "{{ outputs.address }}"\n      type: string\n    - name: identity_file\n      value: "{{ outputs.private_key }}"\n      type: file\n    - name: user\n      value: ubuntu\n      type: string\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);