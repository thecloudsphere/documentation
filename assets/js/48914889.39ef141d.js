"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[857],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,b=m["".concat(i,".").concat(f)]||m[f]||u[f]||o;return n?r.createElement(b,l(l({ref:t},c),{},{components:n})):r.createElement(b,l({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=f;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},757:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:60},l="Samples",s={unversionedId:"samples",id:"samples",title:"Samples",description:"Ansible",source:"@site/docs/samples.md",sourceDirName:".",slug:"/samples",permalink:"/docs/samples",draft:!1,editUrl:"https://github.com/thecloudsphere/documentation/tree/main/docs/samples.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{sidebar_position:60},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/docs/configuration"},next:{title:"Release notes",permalink:"/docs/release-notes"}},i={},p=[{value:"Ansible",id:"ansible",level:2},{value:"Terraform",id:"terraform",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"samples"},"Samples"),(0,a.kt)("h2",{id:"ansible"},"Ansible"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nansible-sample:\n  environment: ansible/base\n  blueprint: ansible/openstack/minimal\n  blueprint_version: main\n  inputs:\n    clouds.yaml:\n      type: file\n      path: clouds.yaml\n    "cloud name": openstack\n    flavor: "SCS-1V:1:10"\n    prefix: "{{ tcs.name }}"\n    "public network": public\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"tcsctl environment import ansible/base\ntcsctl blueprint import ansible/openstack/minimal\ntcsctl template import sample.yaml ansible-sample\ntcsctl deployment create ansible ansible-sample\n")),(0,a.kt)("h2",{id:"terraform"},"Terraform"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'terraform-sample:\n  environment:\n    name: terraform/openstack\n    repository: thecloudsphere/registry\n    repository_server: https://github.com\n  blueprint:\n    name: terraform/openstack/minimal\n    repository: thecloudsphere/registry\n    repository_server: https://github.com\n  blueprint_version: main\n  inputs:\n    clouds.yaml:\n      type: file\n      path: clouds.yaml\n    "cloud name": openstack\n    flavor: "SCS-1V:1:10"\n    prefix: "{{ tcs.name }}"\n    "public network": public\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"tcsctl template import sample.yaml terraform-sample\ntcsctl deployment create terraform terraform-sample\n")))}m.isMDXComponent=!0}}]);